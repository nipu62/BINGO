/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo_6.pkg3;

import InterfaceObserver.Game_Values;
import java.awt.CardLayout;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author Shaurav
 */
public class menu3 extends javax.swing.JFrame implements Game_Values{

    /**
     * Creates new form menu3
     */
    String ip;
    Bingo_Client b = new Bingo_Client();
    public boolean isHost = false;
    public menu3() {
        super("Bingo");
        initComponents();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        startPane = new javax.swing.JPanel();
        startGame = new javax.swing.JButton();
        instruction = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        gamePane = new javax.swing.JPanel();
        gamePane1 = new javax.swing.JPanel();
        guest = new javax.swing.JButton();
        host = new javax.swing.JButton();
        back = new javax.swing.JButton();
        finalPane = new javax.swing.JPanel();
        nameField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        IPAdressfield = new javax.swing.JTextField();
        ipInfo = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        backFromFinalPane = new javax.swing.JButton();
        portNo = new javax.swing.JLabel();
        portField = new javax.swing.JTextField();
        showWait = new javax.swing.JLabel();
        instructionPane = new javax.swing.JPanel();
        Back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        exitPane = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setBackground(new java.awt.Color(51, 51, 255));
        mainPanel.setLayout(new java.awt.CardLayout());

        startPane.setBackground(new java.awt.Color(0, 51, 153));
        startPane.setLayout(new java.awt.GridBagLayout());

        startGame.setText("Start Game");
        startGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startGameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.ipady = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(41, 142, 0, 160);
        startPane.add(startGame, gridBagConstraints);

        instruction.setText("Instruction");
        instruction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 142, 0, 160);
        startPane.add(instruction, gridBagConstraints);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 47;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 142, 69, 160);
        startPane.add(exit, gridBagConstraints);

        mainPanel.add(startPane, "startPane");

        gamePane.setBackground(new java.awt.Color(0, 51, 153));
        gamePane.setLayout(new java.awt.CardLayout());

        gamePane1.setBackground(new java.awt.Color(0, 51, 153));
        gamePane1.setLayout(new java.awt.GridBagLayout());

        guest.setBackground(new java.awt.Color(51, 255, 51));
        guest.setText("Guest");
        guest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guestActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 32;
        gridBagConstraints.ipady = 28;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 143, 0, 0);
        gamePane1.add(guest, gridBagConstraints);

        host.setBackground(new java.awt.Color(255, 255, 102));
        host.setText("Host");
        host.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 38;
        gridBagConstraints.ipady = 25;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(60, 143, 0, 0);
        gamePane1.add(host, gridBagConstraints);

        back.setText("back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 44;
        gridBagConstraints.ipady = 23;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(52, 65, 11, 0);
        gamePane1.add(back, gridBagConstraints);

        gamePane.add(gamePane1, "gamePane1");

        finalPane.setBackground(new java.awt.Color(0, 51, 153));
        finalPane.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 169;
        gridBagConstraints.ipady = 18;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(39, 18, 0, 0);
        finalPane.add(nameField, gridBagConstraints);

        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.ipady = 24;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(39, 38, 0, 0);
        finalPane.add(nameLabel, gridBagConstraints);

        jLabel2.setText("IPAddress");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 28;
        gridBagConstraints.ipady = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 38, 0, 0);
        finalPane.add(jLabel2, gridBagConstraints);

        IPAdressfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IPAdressfieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 169;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 18, 0, 0);
        finalPane.add(IPAdressfield, gridBagConstraints);

        ipInfo.setText("*you must fill IPAdressfield");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 77;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 18, 0, 0);
        finalPane.add(ipInfo, gridBagConstraints);

        submit.setText("Submit");
        submit.setEnabled(false);
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 27;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 56, 30, 0);
        finalPane.add(submit, gridBagConstraints);

        backFromFinalPane.setText("  Back  ");
        backFromFinalPane.setAlignmentX(1.0F);
        backFromFinalPane.setAlignmentY(1.0F);
        backFromFinalPane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backFromFinalPaneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 90, 30, 64);
        finalPane.add(backFromFinalPane, gridBagConstraints);

        portNo.setText("Port no");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 38, 0, 0);
        finalPane.add(portNo, gridBagConstraints);

        portField.setText("2016");
        portField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 193;
        gridBagConstraints.ipady = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 0);
        finalPane.add(portField, gridBagConstraints);

        showWait.setBackground(new java.awt.Color(255, 255, 204));
        showWait.setFont(new java.awt.Font("David", 0, 14)); // NOI18N
        showWait.setForeground(new java.awt.Color(255, 255, 102));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 371;
        gridBagConstraints.ipady = 37;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 18, 0, 64);
        finalPane.add(showWait, gridBagConstraints);

        gamePane.add(finalPane, "finalPane");
        finalPane.getAccessibleContext().setAccessibleParent(startPane);

        mainPanel.add(gamePane, "gamePane");

        instructionPane.setBackground(new java.awt.Color(0, 51, 153));

        Back.setText("Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(255, 255, 51));
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(255, 255, 102));
        jTextArea2.setRows(5);
        jTextArea2.setText("Do a move and wait for opponen's\nmove.One who will cut down five row\nor column first will win the match\n ");
        jTextArea2.setDisabledTextColor(new java.awt.Color(255, 0, 102));
        jTextArea2.setEnabled(false);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout instructionPaneLayout = new javax.swing.GroupLayout(instructionPane);
        instructionPane.setLayout(instructionPaneLayout);
        instructionPaneLayout.setHorizontalGroup(
            instructionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, instructionPaneLayout.createSequentialGroup()
                .addContainerGap(412, Short.MAX_VALUE)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(instructionPaneLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        instructionPaneLayout.setVerticalGroup(
            instructionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(instructionPaneLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(Back, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(instructionPane, "instructionPane");

        javax.swing.GroupLayout exitPaneLayout = new javax.swing.GroupLayout(exitPane);
        exitPane.setLayout(exitPaneLayout);
        exitPaneLayout.setHorizontalGroup(
            exitPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 517, Short.MAX_VALUE)
        );
        exitPaneLayout.setVerticalGroup(
            exitPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        mainPanel.add(exitPane, "exitPane");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void instructionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "instructionPane");
    }//GEN-LAST:event_instructionActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        contPlay[0] = false;
        cont[0] = false;
        System.exit(0);
        this.dispose();
        
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed

    private void startGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startGameActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "gamePane");
    }//GEN-LAST:event_startGameActionPerformed

    private void hostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostActionPerformed
        CardLayout card = (CardLayout) gamePane.getLayout();
        isHost = true;
        card.show(gamePane, "finalPane");
    }//GEN-LAST:event_hostActionPerformed

    private void guestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guestActionPerformed
        CardLayout card = (CardLayout) gamePane.getLayout();
        isHost = false;
        card.show(gamePane, "finalPane");
    }//GEN-LAST:event_guestActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "startPane");
    }//GEN-LAST:event_backActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
      
        final JFrame f =this;
        
        
        System.out.println(portField.getText());
        if (portField.getText() != "")
                {
                    port[0] = Integer.parseInt(portField.getText());
                    System.out.println(port[0]);
                }
        playerNames[0] = nameField.getText();
        showWait.setText("Please wait ...*");
        showWait.setVisible(true);
        submit.setEnabled(false);
        showForWaiting();
        //starting server is host
        if (isHost == true)
        {
            b.startServer();
//            try {
//                Thread.sleep(1000);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(menu3.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
        
        new Thread(new Runnable() {

           @Override
           public void run() {
                try {
            b.StartGame(IPAdressfield.getText(),f);
        } catch (IOException ex) {
            Logger.getLogger(menu3.class.getName()).log(Level.SEVERE, null, ex);
        }
           }
       }).start();
//        try {
//            Thread.sleep(8000);
//        } catch (InterruptedException ex) {
//            this.dispose();
//            Logger.getLogger(menu3.class.getName()).log(Level.SEVERE, null, ex);
//        }
      
        //this.dispose();
        
    }//GEN-LAST:event_submitActionPerformed

    private void IPAdressfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IPAdressfieldActionPerformed
        submit.setEnabled(true);
    }//GEN-LAST:event_IPAdressfieldActionPerformed

    private void backFromFinalPaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backFromFinalPaneActionPerformed
        CardLayout card = (CardLayout) gamePane.getLayout();
        card.show(gamePane, "gamePane1");
    }//GEN-LAST:event_backFromFinalPaneActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
       CardLayout card = (CardLayout) mainPanel.getLayout();
        card.show(mainPanel, "startPane");
    }//GEN-LAST:event_BackActionPerformed

    private void portFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portFieldActionPerformed

    public void closeMenu()
    {
        this.dispose();
    }
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(menu3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(menu3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(menu3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(menu3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new menu3().setVisible(true);
//            }
//        });
//        
//    }
    public String getIP()
    {
        return ip;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JTextField IPAdressfield;
    private javax.swing.JButton back;
    private javax.swing.JButton backFromFinalPane;
    private javax.swing.JButton exit;
    private javax.swing.JPanel exitPane;
    private javax.swing.JPanel finalPane;
    private javax.swing.JPanel gamePane;
    private javax.swing.JPanel gamePane1;
    private javax.swing.JButton guest;
    private javax.swing.JButton host;
    private javax.swing.JButton instruction;
    private javax.swing.JPanel instructionPane;
    private javax.swing.JLabel ipInfo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField portField;
    private javax.swing.JLabel portNo;
    private javax.swing.JLabel showWait;
    private javax.swing.JButton startGame;
    private javax.swing.JPanel startPane;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables

    private void showForWaiting() {
         SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                showWait.setText("please wait ..**");
                
                 //To change body of generated methods, choose Tools | Templates.
            }
        });
         //To change body of generated methods, choose Tools | Templates.
    }
}
